HW1
Недостатки:

1. сделано несколько коммитов по мере разработки - это хорошо. Но имена коммитов типа "кое что", "done@,
    "кое как заработало" и "исправил мелкий косяк" - малоинформативны - не находите ? )))
    Как и несколько коммитов с одинаковым названием(((
2. codeStyle - в макете вы используете snake_case - это правильно.
    Но мы дополнительно рекомендуем формировать имя view-элемента из смысловой части
    и имени типа - это упрощает распознавание view-элементов в коде по именам - например не edit_login,
    а login_edit_text. При этом в коде это имя трансформируется в loginEditText - сразу понятно
    что это вьюшка и для чего она) Вы используете другой подход - сокращение вначале имени
    - но тут надо включать вспоминалку что это означает - проще дописать тип элемента
    - сейчас нет ограничений на длину имени (тут конечно нужно тоже знать меру - но вобщем длинное имя лучше непонятного)
3. не выделен слой модели

HW2
1) Добавить к приложению модель по аналогии с тем как это сделано на уроке (api/repo, usecase/interactor)
2) Все "зависимости" храним в App
3) Внимательно обдумайте модель. Ошибка в её проектировании самая дорогая.
    Изменения в модели влекут изменение во всём приложении.
    Попробуйте предугадать потенциальные изменения приложения и сделать код достаточно гибким
    в плане адаптации под изменяющиеся требования


3)  Основа:
    Предполагается, что мы защищаем какие то данные от постороннего доступа. Не просто же так мы логин/пароль ставим.
    Эти данные по классике защищают от несанкционированного прочтения и изменения (удаления).
    В идеале эти данные должны бэкапиться на географически удалённый сервер с возможностью восстановления.
    Если мы их бэкапим на удалённый сервер, то логин и пароль так же должен храниться на сервере (желательно другом).

    Следовательно:
        - хранить на устройстве данные можно, если уровень конфиденциальности данных позволяет это.
        - хранить на устройстве временные базы данных с обобщёнными данными,
            которыми могут пользоваться разные пользователи, допустимо.
            Напримеры для банков это виды банковских карт, элементы дизайна..
        - хранение пар (логин, пароль) на самом устройстве, может иметь смысл при условии,
            что устройство иногда или всегда работает в офлайне.
            Если устройство работает иногда в офлайне, то должно вестить логирование входов и попыток входов
            в приложение.
        - если пользователи работают с единой БД, то все операции так же должны быть залогированы.

    ИТОГО:
        Нам потребуются:
            - локальная БД с логинами и паролями, которая будет использоваться при отсутствии интернета;
            - локальная БД с данными, которая синхронизируется по условиям (местоположение, частота);
            - локальная БД с операциями по БД с данными (логи), которая так же как и основная
                синхронизируется, возможно чаще.
                Порядок: Запрос пользователя -> запись логов (кто, когда и что хотел)
                        -> попытка выполнить (обработка в основной БД)
                        -> запись логов (кто, когда, что хотел и результат)

P.S. Надеюсь правильно понял ТЗ


